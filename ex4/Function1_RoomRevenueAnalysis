-- Function1_RoomRevenueAnalysis.sql
CREATE OR REPLACE FUNCTION calculate_room_revenue_analysis(
    p_start_date DATE,
    p_end_date DATE,
    p_room_type VARCHAR DEFAULT NULL
)
RETURNS TABLE (
    room_type VARCHAR,
    total_revenue DECIMAL,
    occupancy_rate DECIMAL,
    avg_daily_rate DECIMAL,
    total_nights INTEGER,
    total_reservations INTEGER
) AS $$
DECLARE
    v_total_days INTEGER;
    v_room_count INTEGER;
    rec RECORD;
    v_exception_msg TEXT;
BEGIN
    -- Exception handling for date validation
    BEGIN
        IF p_start_date > p_end_date THEN
            RAISE EXCEPTION 'Start date must be before end date';
        END IF;
        
        v_total_days := p_end_date - p_start_date + 1;
    EXCEPTION
        WHEN OTHERS THEN
            v_exception_msg := SQLERRM;
            RAISE NOTICE 'Date validation error: %', v_exception_msg;
            RETURN;
    END;
    
    -- Using explicit cursor to process room types
    FOR rec IN 
        SELECT DISTINCT fr.room_type
        FROM foreign_rooms fr
        WHERE p_room_type IS NULL OR fr.room_type = p_room_type
    LOOP
        -- Calculate metrics for each room type
        SELECT 
            COUNT(DISTINCT fr.room_number) INTO v_room_count
        FROM foreign_rooms fr
        WHERE fr.room_type = rec.room_type;
        
        -- Return calculated values using implicit cursor
        RETURN QUERY
        SELECT 
            rec.room_type::VARCHAR,
            COALESCE(SUM(t.amount), 0)::DECIMAL as total_revenue,
            CASE 
                WHEN v_room_count * v_total_days > 0 THEN
                    (COUNT(DISTINCT DATE(fc.checkindate) || '-' || fr.room_number)::DECIMAL / 
                    (v_room_count * v_total_days) * 100)
                ELSE 0
            END as occupancy_rate,
            CASE 
                WHEN COUNT(DISTINCT fres.reservationid) > 0 THEN
                    SUM(t.amount) / COUNT(DISTINCT DATE(fc.checkindate) || '-' || fr.room_number)
                ELSE 0
            END as avg_daily_rate,
            COUNT(DISTINCT DATE(fc.checkindate) || '-' || fr.room_number)::INTEGER as total_nights,
            COUNT(DISTINCT fres.reservationid)::INTEGER as total_reservations
        FROM foreign_rooms fr
        LEFT JOIN foreign_reservations fres ON fr.room_number = fres.roomnumber
        LEFT JOIN foreign_checkinout fc ON fres.reservationid = fc.reservationid
        LEFT JOIN reservationfinancelink rfl ON fres.reservationid = rfl.reservationid
        LEFT JOIN transaction t ON rfl.transactionid = t.transactionid
        WHERE fr.room_type = rec.room_type
            AND fc.checkindate >= p_start_date
            AND fc.checkindate <= p_end_date
            AND t.transactiontype = 'Payment'
        GROUP BY rec.room_type;
    END LOOP;
    
    RETURN;
END;
$$ LANGUAGE plpgsql;