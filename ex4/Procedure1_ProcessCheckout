-- Procedure1_ProcessCheckout.sql
CREATE OR REPLACE PROCEDURE process_checkout_settlement(
    p_reservation_id INTEGER,
    p_payment_method_id INTEGER,
    p_discount_percent DECIMAL DEFAULT 0
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_room_record RECORD;
    v_total_amount DECIMAL;
    v_discount_amount DECIMAL;
    v_final_amount DECIMAL;
    v_existing_payments DECIMAL;
    v_balance_due DECIMAL;
    v_new_transaction_id INTEGER;
    v_invoice_id INTEGER;
BEGIN
    -- Start transaction
    BEGIN
        -- Get reservation details using record type
        SELECT 
            fres.reservationid,
            fres.roomnumber,
            fres.checkindate,
            fres.checkoutdate,
            fr.price_per_night,
            fr.room_type,
            fg.guestid,
            fg.firstname || ' ' || fg.lastname as guest_name
        INTO v_room_record
        FROM foreign_reservations fres
        JOIN foreign_rooms fr ON fres.roomnumber = fr.room_number
        JOIN foreign_guests fg ON fres.guestid = fg.guestid
        WHERE fres.reservationid = p_reservation_id;
        
        IF NOT FOUND THEN
            RAISE EXCEPTION 'Reservation % not found', p_reservation_id;
        END IF;
        
        -- Calculate total amount
        v_total_amount := v_room_record.price_per_night * 
                         (v_room_record.checkoutdate - v_room_record.checkindate);
        
        -- Apply discount validation
        IF p_discount_percent < 0 OR p_discount_percent > 100 THEN
            RAISE EXCEPTION 'Invalid discount percentage: %', p_discount_percent;
        END IF;
        
        v_discount_amount := v_total_amount * (p_discount_percent / 100);
        v_final_amount := v_total_amount - v_discount_amount;
        
        -- Check existing payments
        SELECT COALESCE(SUM(t.amount), 0)
        INTO v_existing_payments
        FROM reservationfinancelink rfl
        JOIN transaction t ON rfl.transactionid = t.transactionid
        WHERE rfl.reservationid = p_reservation_id;
        
        v_balance_due := v_final_amount - v_existing_payments;
        
        -- Process payment if balance due
        IF v_balance_due > 0 THEN
            -- Insert new transaction
            INSERT INTO transaction (transactiondate, amount, transactiontype)
            VALUES (CURRENT_DATE, v_balance_due, 'Payment')
            RETURNING transactionid INTO v_new_transaction_id;
            
            -- Link payment method
            INSERT INTO has (transactionid, paymentmethodid)
            VALUES (v_new_transaction_id, p_payment_method_id);
            
            -- Link to reservation
            INSERT INTO reservationfinancelink (reservationid, transactionid)
            VALUES (p_reservation_id, v_new_transaction_id);
            
            -- Create invoice
            INSERT INTO invoice (invoicedate, totalamount, paymentstatus)
            VALUES (CURRENT_DATE, v_final_amount, 'Paid')
            RETURNING invoiceid INTO v_invoice_id;
            
            -- Update checkout status
            UPDATE foreign_checkinout
            SET checkoutdate = CURRENT_DATE
            WHERE reservationid = p_reservation_id;
            
            RAISE NOTICE 'Checkout processed for % - Amount paid: $%', 
                        v_room_record.guest_name, v_balance_due;
        ELSE
            RAISE NOTICE 'No payment due for reservation %', p_reservation_id;
        END IF;
        
        -- Log to sync table
        INSERT INTO reservationsync (reservationid, syncdate, syncstatus, syncdetails)
        VALUES (p_reservation_id, CURRENT_TIMESTAMP, 'Completed', 
                'Checkout processed. Total: $' || v_final_amount || 
                ', Discount: ' || p_discount_percent || '%');
        
        COMMIT;
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE NOTICE 'Error processing checkout: %', SQLERRM;
            RAISE;
    END;
END;
$$;