-- Main2_supplier_reservation_management_CLEAN.sql
DO $$
DECLARE
    -- Variables for function results
    v_supplier_cursor refcursor;
    v_supplier_record RECORD;
    v_supplier_total NUMERIC := 0;
    v_record_count INTEGER := 0;
    
    -- Variables for procedure output
    v_created_transactions INTEGER;
    v_updated_links INTEGER;
    
    -- Test data variables
    v_test_supplier_id NUMERIC := 1;
    
BEGIN
    RAISE NOTICE '========================================';
    RAISE NOTICE 'SUPPLIER AND RESERVATION MANAGEMENT REPORT';
    RAISE NOTICE 'Report Date: %', CURRENT_TIMESTAMP;
    RAISE NOTICE '========================================';
    RAISE NOTICE '';
    
    -- Don't insert new reservation data, use what's already there
    RAISE NOTICE 'Using existing test reservation data...';
    
    -- Just ensure we have the test invoices
    INSERT INTO invoice (invoiceid, discount, type, transactionid)
    VALUES 
        (901, 10.00, 'A', 101),
        (902, 15.00, 'A', 102),
        (903, 5.00, 'A', 103)
    ON CONFLICT (invoiceid) DO NOTHING;
    
    RAISE NOTICE 'Test data verified.';
    RAISE NOTICE '';
    
    -- PART 1: Call Function 2 - Get Supplier Transactions with RefCursor
    RAISE NOTICE '--- PART 1: SUPPLIER TRANSACTION DETAILS ---';
    RAISE NOTICE 'Retrieving transactions for Supplier ID: %', v_test_supplier_id;
    RAISE NOTICE '';
    
    BEGIN
        -- Get the ref cursor from the function
        v_supplier_cursor := get_supplier_transactions_refcursor(v_test_supplier_id);
        
        IF v_supplier_cursor IS NOT NULL THEN
            RAISE NOTICE 'Supplier Name | Category    | Description         | Trans ID | Date       | Amount   | Discount | Final Amt';
            RAISE NOTICE '--------------|-------------|---------------------|----------|------------|----------|----------|----------';
            
            LOOP
                FETCH v_supplier_cursor INTO v_supplier_record;
                EXIT WHEN NOT FOUND;
                
                RAISE NOTICE '%-13s | %-11s | %-19s | %-8s | %-10s | $%-7s | %-8s | $%-8s',
                    SUBSTRING(v_supplier_record.suppliername, 1, 13),
                    SUBSTRING(v_supplier_record.category, 1, 11),
                    SUBSTRING(v_supplier_record.expense_description, 1, 19),
                    v_supplier_record.transactionid,
                    v_supplier_record.transaction_date,
                    LPAD(v_supplier_record.amount::TEXT, 7),
                    COALESCE(v_supplier_record.discount::TEXT || '%', 'N/A'),
                    LPAD(v_supplier_record.final_amount::TEXT, 8);
                
                v_supplier_total := v_supplier_total + v_supplier_record.final_amount;
                v_record_count := v_record_count + 1;
            END LOOP;
            
            CLOSE v_supplier_cursor;
            
            RAISE NOTICE '--------------|-------------|---------------------|----------|------------|----------|----------|----------';
            RAISE NOTICE 'Total Records: % | Total Amount (after discounts): $%', v_record_count, v_supplier_total;
            
        ELSE
            RAISE NOTICE 'No transactions found for supplier.';
        END IF;
        
    EXCEPTION
        WHEN OTHERS THEN
            RAISE NOTICE 'Error retrieving supplier transactions: %', SQLERRM;
            IF v_supplier_cursor IS NOT NULL THEN
                CLOSE v_supplier_cursor;
            END IF;
    END;
    
    RAISE NOTICE '';
    
    -- PART 2: Call Procedure 2 - Reconcile Reservations
    RAISE NOTICE '--- PART 2: RESERVATION RECONCILIATION ---';
    RAISE NOTICE 'Processing unlinked reservations from the last 7 days...';
    RAISE NOTICE '';
    
    BEGIN
        -- Show current reservation status before reconciliation
        RAISE NOTICE 'Current unlinked reservations:';
        FOR v_supplier_record IN 
            SELECT rs.reservation_id, rs.guest_name, rs.total_amount
            FROM reservationsync rs
            LEFT JOIN reservationfinancelink rfl ON rs.reservation_id = rfl.reservation_id
            WHERE rfl.link_id IS NULL
            AND rs.reservation_id >= 9000  -- Only our test reservations
        LOOP
            RAISE NOTICE '  - Reservation %: % ($%)', 
                v_supplier_record.reservation_id, 
                v_supplier_record.guest_name,
                v_supplier_record.total_amount;
        END LOOP;
        
        RAISE NOTICE '';
        
        -- Call the reconciliation procedure
        CALL reconcile_reservations(
            v_created_transactions,
            v_updated_links,
            7
        );
        
        RAISE NOTICE '';
        RAISE NOTICE 'Reconciliation Results:';
        RAISE NOTICE '  - New Transactions Created: %', v_created_transactions;
        RAISE NOTICE '  - Reservation Links Updated: %', v_updated_links;
        RAISE NOTICE '';
        
        -- Show the sync log entries
        RAISE NOTICE 'Recent Sync Log Entries:';
        RAISE NOTICE 'Reservation | Operation          | Status  | Amount   | Action';
        RAISE NOTICE '------------|-------------------|---------|----------|------------------';
        
        FOR v_supplier_record IN 
            SELECT reservation_id, operation_type, sync_status, 
                   COALESCE(new_total_amount, old_total_amount) as amount,
                   SUBSTRING(COALESCE(auto_actions, error_message, 'N/A'), 1, 30) as action
            FROM reservation_sync_log
            WHERE process_timestamp >= CURRENT_TIMESTAMP - INTERVAL '1 minute'
            AND reservation_id >= 9000  -- Only our test reservations
            ORDER BY log_id DESC
            LIMIT 5
        LOOP
            RAISE NOTICE '%-11s | %-17s | %-7s | $%-7s | %-s',
                v_supplier_record.reservation_id,
                v_supplier_record.operation_type,
                v_supplier_record.sync_status,
                LPAD(COALESCE(v_supplier_record.amount, 0)::TEXT, 7),
                v_supplier_record.action;
        END LOOP;
        
    EXCEPTION
        WHEN OTHERS THEN
            RAISE NOTICE 'Error in reservation reconciliation: %', SQLERRM;
    END;
    
    -- Continue with trigger demonstrations...
    -- (rest of the code remains the same)
    
    RAISE NOTICE '';
    RAISE NOTICE '========================================';
    RAISE NOTICE 'END OF SUPPLIER AND RESERVATION REPORT';
    RAISE NOTICE '========================================';
    
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE 'Fatal error in main program: %', SQLERRM;
        RAISE;
END;
$$;